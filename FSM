
import numpy as np
import random as rm

# The statespace
states = np.array (["S0","S1","S2","S3","S4","S5","S6","S7"])
X=np.random.randint(0, 5)
print ("Input" + str(X))
# Name of transitions
transitionName = np.array ([["S0_0","S0_1","S0_2","S0_3","S0_4","S0_5"],
                            ["S1_0","S1_1","S1_2","S1_3","S1_4","S1_5"],
                            ["S2_0","S2_1","S2_2","S2_3","S2_4","S2_5"],
                            ["S3_0","S3_1","S3_2","S3_3","S3_4","S3_5"],
                            ["S4_0","S4_1","S4_2","S4_3","S4_4","S4_5"],
                            ["S5_0","S5_1","S5_2","S5_3","S5_4","S5_5"],
                            ["S6_0","S6_1","S6_2","S6_3","S6_4","S6_5"],
                            ["S7_0","S7_1","S7_2","S7_3","S7_4","S7_5"]])

# Transition matrix and matrix of outputs
transitionMatrix = np.array ([["S7","S4","S3","S3","S4","S2"],
                              ["S3","S1","S2","S4","S2","S4"],
                              ["S5","S3","S4","S5","S5","S3"],
                              ["S6","S5","S4","S7","S3","S5"],
                              ["S5","S6","S7","S6","S4","S5"],
                              ["S5","S6","S1","S6","S7","S7"],
                              ["S6","S7","S2","S1","S1","S7"],
                              ["S7","S1","S7","S2","S7","S1"]])

MatrixOut=np.array ([[1,2,3,5,2,3],
                     [1,4,2,2,4,3],
                     [3,1,1,0,2,1],
                     [0,3,3,5,2,1],
                     [5,3,2,4,5,0],
                     [2,1,4,0,0,5],
                     [1,1,3,3,5,3],
                     [2,1,0,3,3,2]])


def activity_forecast(NumIteration):
    # Choose the starting state
    activityToday = "S0"
    activityList = [activityToday]
    i = 0
    Input=X;
    while i != NumIteration:
        if activityToday == "S0":
            currentS=transitionMatrix[0,Input]
            currentOut=MatrixOut[0,Input]
            currentName=transitionName[0,Input]
        elif activityToday == "S1":
            currentS=transitionMatrix[1,Input]
            currentOut=MatrixOut[1,Input]
            currentName=transitionName[1,Input]
        elif activityToday == "S2":
            currentS=transitionMatrix[2,Input]
            currentOut=MatrixOut[2,X]
            currentName=transitionName[2,Input]
        elif activityToday == "S3":
            currentS=transitionMatrix[3,Input]
            currentOut=MatrixOut[3,Input]
            currentName=transitionName[3,Input]
        elif activityToday == "S4":
            currentS=transitionMatrix[4,Input]
            currentOut=MatrixOut[4,Input]
            currentName=transitionName[4,Input]
        elif activityToday == "S5":
            currentS=transitionMatrix[5,Input]
            currentOut=MatrixOut[5,Input]
            currentName=transitionName[5,Input]  
        elif activityToday == "S6":
            currentS=transitionMatrix[6,Input]
            currentOut=MatrixOut[6,Input]
            currentName=transitionName[6,Input]
        elif activityToday == "S7":
            currentS=transitionMatrix[7,Input]
            currentOut=MatrixOut[7,Input]
            currentName=transitionName[7,Input]
        activityList.append(currentS)   
        activityToday=currentS
        i += 1    
        Input = currentOut
        print(Input)
 
    
    print("Possible states: " + str(activityList))
    print("End state after "+ str(NumIteration) + " steps: " + activityToday)
        
    #return activityList

activity_forecast(20)

# To save every activityList
#list_activity = []
#count = 0

# `Range` starts from the first count up until but excluding the last count
#for iterations in range(1,10000):
     #   list_activity.append(activity_forecast(2))

# Check out all the `activityList` we collected    
#print(list_activity)

# Iterate through the list to get a count of all activities ending in state:'Run'
#for smaller_list in list_activity:
   # if(smaller_list[2] == "Run"):
      #  count += 1

# Calculate the probability of starting from state:'Sleep' and ending at state:'Run'
#percentage = (count/10000) * 100
#print("The probability of starting at state:'Sleep' and ending at state:'Run'= " + str(percentage) + "%")



